import { b, c, d } from './chunk-VO7VPLVP.js';
import { useEffectAsync, useMemoAsync } from '@chengsokdara/react-hooks-async';
import { useRef, useState, useEffect } from 'react';

var ne={apiKey:"",autoStart:!1,autoTranscribe:!0,mode:"transcriptions",nonStop:!1,removeSilence:!1,stopTimeout:5e3,streaming:!1,timeSlice:1e3,onDataAvailable:void 0,onTranscribe:void 0},oe={stop:void 0},ae={blob:void 0,text:void 0},ue=P=>{let{apiKey:b$1,autoStart:x,autoTranscribe:A,mode:S,nonStop:U,removeSilence:M,stopTimeout:q,streaming:T,timeSlice:K,whisperConfig:u,onDataAvailable:O,onTranscribe:d$1}={...ne,...P};if(!b$1&&!d$1)throw new Error("apiKey is required if onTranscribe is not provided");let l=useRef([]),i=useRef(),s=useRef(),t=useRef(),a=useRef(),m=useRef(oe),[I,k]=useState(!1),[$,B]=useState(!1),[j,w]=useState(!1),[z,p]=useState(ae);useEffect(()=>()=>{l.current&&(l.current=[]),i.current&&(i.current.flush(),i.current=void 0),t.current&&(t.current.destroy(),t.current=void 0),y("stop"),s.current&&(s.current.off("speaking",R),s.current.off("stopped_speaking",v)),a.current&&(a.current.getTracks().forEach(e=>e.stop()),a.current=void 0);},[]),useEffectAsync(async()=>{x&&await C();},[x]);let N=async()=>{await C();},G=async()=>{await V();},J=async()=>{await H();},C=async()=>{try{if(a.current||await Q(),a.current){if(!t.current){let{default:{RecordRTCPromisesHandler:r,StereoAudioRecorder:o}}=await import('recordrtc'),n={mimeType:"audio/wav",numberOfAudioChannels:1,recorderType:o,sampleRate:44100,timeSlice:T?K:void 0,type:"audio",ondataavailable:A&&T?Z:void 0};t.current=new r(a.current,n);}if(!i.current){let{Mp3Encoder:r}=await import('lamejs');i.current=new r(1,44100,96);}let e=await t.current.getState();(e==="inactive"||e==="stopped")&&await t.current.startRecording(),e==="paused"&&await t.current.resumeRecording(),U&&W("stop"),k(!0);}}catch{}},Q=async()=>{try{if(a.current&&a.current.getTracks().forEach(e=>e.stop()),a.current=await navigator.mediaDevices.getUserMedia({audio:!0}),!s.current){let{default:e}=await import('hark');s.current=e(a.current,{interval:100,play:!1}),s.current.on("speaking",R),s.current.on("stopped_speaking",v);}}catch{}},W=e=>{m.current[e]||(m.current[e]=setTimeout(H,q));},R=()=>{B(!0),y("stop");},v=()=>{B(!1),U&&W("stop");},V=async()=>{try{t.current&&(await t.current.getState()==="recording"&&await t.current.pauseRecording(),y("stop"),k(!1));}catch{}},H=async()=>{try{if(p(e=>({...e,text:"Hi can you hear me!"})),t.current){let e=await t.current.getState();if((e==="recording"||e==="paused")&&await t.current.stopRecording(),X(),y("stop"),k(!1),A)await Y();else {let r=await t.current.getBlob();p({blob:r});}await t.current.destroy(),l.current=[],i.current&&(i.current.flush(),i.current=void 0),t.current=void 0;}}catch{}},X=()=>{s.current&&(s.current.off("speaking",R),s.current.off("stopped_speaking",v),s.current=void 0),a.current&&(a.current.getTracks().forEach(e=>e.stop()),a.current=void 0);},y=e=>{m.current[e]&&(clearTimeout(m.current[e]),m.current[e]=void 0);},Y=async()=>{try{if(i.current&&t.current&&await t.current.getState()==="stopped"){p(o=>({...o,text:"Hi this is a test"})),w(!0);let r=await t.current.getBlob();if(M){let{createFFmpeg:o}=await import('@ffmpeg/ffmpeg'),n=o({mainName:"main",corePath:b,log:!0});n.isLoaded()||await n.load();let c$1=await r.arrayBuffer();n.FS("writeFile","in.wav",new Uint8Array(c$1)),await n.run("-i","in.wav","-acodec","libmp3lame","-b:a","96k","-ar","44100","-af",c,"out.mp3");let g=n.FS("readFile","out.mp3");if(g.length<=225){n.exit(),p({blob:r}),w(!1);return}r=new Blob([g.buffer],{type:"audio/mpeg"}),n.exit();}else {let o=await r.arrayBuffer(),n=i.current.encodeBuffer(new Int16Array(o));r=new Blob([n],{type:"audio/mpeg"});}if(typeof d$1=="function"){let o=await d$1(r);p(o);}else {let o=new File([r],"speech.mp3",{type:"audio/mpeg"}),n=await E(o);p({blob:r,text:n});}w(!1);}}catch{w(!1);}},Z=async e=>{try{if(T&&t.current){if(O?.(e),i.current){let o=await e.arrayBuffer(),n=i.current.encodeBuffer(new Int16Array(o)),c=new Blob([n],{type:"audio/mpeg"});l.current.push(c);}if(await t.current.getState()==="recording"){let o=new Blob(l.current,{type:"audio/mpeg"}),n=new File([o],"speech.mp3",{type:"audio/mpeg"}),c="";typeof d$1=="function"?c=(await d$1(n)).text||"":c=await E(n),c&&p(g=>({...g,text:c}));}}}catch{}},E=useMemoAsync(async e=>{let r=new FormData;r.append("file",e),r.append("model","whisper-1"),S==="transcriptions"&&r.append("language",u?.language??"en"),u?.prompt&&r.append("prompt",u.prompt),u?.response_format&&r.append("response_format",u.response_format),u?.temperature&&r.append("temperature",`${u.temperature}`);let o={};o["Content-Type"]="multipart/form-data",b$1&&(o.Authorization=`Bearer ${b$1}`);let{default:n}=await import('axios');return (await n.post(d+S,r,{headers:o})).data.text},[b$1,S,u]);return {recording:I,speaking:$,transcribing:j,transcript:z,pauseRecording:G,startRecording:N,stopRecording:J,setTranscript:p}};

export { ue as a };
